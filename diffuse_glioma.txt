### GEO for diffuse glioma
rm(list=ls())
setwd("C:\\Users\\11780\\Documents\\R”Ô—‘¡∑œ∞\\GEO dataset drill\\glioma")
bioPackages <- c(
  "stringi",
  "GEOquery",
  "limma",
  "ggfortify",
  "ggplot2",
  "pheatmap",
  "ggstatsplot",
  "VennDiagram",
  "clusterProfiler",
  "org.Hs.eg.db"
  )
local ( {
  r <- getOption( "repos" ) ;
  r[ "CRAN" ] <- "https://mirrors.tuna.tsinghua.edu.cn/CRAN/";
  options( repos = r )
  BioC <- getOption( "BioC_mirror" );
  BioC[ "BioC_mirror" ] <- "https://mirrors.ustc.edu.cn/bioc/";
  options( BioC_mirror = BioC)
  })
source( "https://bioconductor.org/biocLite.R")
lapply( bioPackages, 
  function( bioPackage ) {
    if ( !require( bioPackage, character.only=T ) ) {
	  CRANpackages <- available.packages()
	    if ( bioPackage %in% rownames( CRANpackages) ) {
		  install.packages( bioPackage )
		} else{
		      BiocInstaller::biocLite( bioPackage, suppressUpdate = F, ask = F)
	    }
      }
	}
)
## awk '{if(!NF || /^#/){next}}1' /Data/chenll/Homo_sapiens.GRCh37.87.gtf | cut -f9 | sed 's/\"//g' | sed 's/;//g' | awk '{ print $4"\t"$8 }' | awk '{if(/^E/){next}}1' | awk '{ print $2"\t"$1 }' | sort -k 1 | uniq > Homo_sapiens.GRCh37.87.gtf.gene2type
source("https://bioconductor.org/biocLite.R")
biocLite("rtracklayer")
biocLite("SummarizedExperiment")
library(rtracklayer)
library(SummarizedExperiment)
gtf1 <- import('Homo_sapiens.GRCh37.87.gtf')
gtf_df <- as.data.frame(gtf1)
test <- gtf_df[1:5,]
View(test)
library(dplyr)
geneid_df <- select(gtf_df,c(gene_name,gene_biotype))
write.table(geneid_df , "geneid.txt", row.names=F)
genetype2 = read.table( 'geneid.txt' ,header=T)
sort(table(genetype2$gene_biotype))
genetype2=genetype2[ which(genetype2$gene_biotype != "protein_coding"),]
length( unique( genetype2$gene_name)) ## use the function unique() to delete the duplicated names
save(genetype2, file="Relationship_others_gene.Rdata")
library(GEOquery)
GSE_name = 'GSE4290'
options( 'download.file.method.GEOquery' = 'libcurl' )
gset <- getGEO(GSE_name, getGPL = T )
save( gset, file="gset.Rdata")
options(stringsAsFactors = F)
load('gset.Rdata')
library("GEOquery")
{ 
  gset = gset[[1]]
  exprSet = exprs (gset) ## to extract the expression matrix
  pdata = pData ( gset ) ## to extract the sample informaton
  group_list = as.character( pdata[,35])
  }
dim(exprSet)
exprSet[1:3, 1:5]  ## the colnames is the sample id while the rownames is the probe id
table( group_list ) ## pdata is needed to determine the phenotype
{
  n_expr = exprSet[, grep( "non-tumor", group_list)]
  g_expr=exprSet[, grep( "glioblastoma", group_list)]
  a_expr = exprSet[, grep("astrocytoma", group_list)]
  o_expr = exprSet[, grep("oligodendroglioma" ,group_list)]
 } ## to group the samples
{ 
  exprSet = cbind( n_expr, g_expr)
  group_list=c(rep("normal", ncol(n_expr)), rep("gbm", ncol(g_expr)))
 }
dim(exprSet)
exprSet[1:3, 1:5]
table( group_list )
save(exprSet, group_list, file="exprSet_by_group.Rdata")
## the next step is to delete the probe without annotation
GPL=gset@featureData@data ## the @ means a slot
colnames(GPL)
View(GPL)
ids = GPL[, c(1,11)] ## to extract the probe ID and gene symbol
a <- strsplit( as.character(ids[,2]), " /// ") ## to split the character according to "///"
tmp <- mapply(cbind, ids[,1], a)
library("plyr")
ID2gene <- ldply(tmp, data.frame)
IDgene2 = ID2gene[,2:3]
colnames( IDgene2) = c("id", "gene")
load("Relationship_others_gene.Rdata")
IDgene2$type = genetype2[ match( IDgene2[, 2] , genetype2[,1]),2]
dim(IDgene2)
save(IDgene2, file="IDgene2.Rdata")
load("IDgene2.Rdata")
load("exprSet_by_group.Rdata")
{
  exprSet = exprSet[ which(rownames (exprSet) %in% IDgene2[,1]), ]
  IDgene2 = IDgene2[ match(rownames (exprSet), IDgene2[,1]), ]
}
dim(exprSet)
dim(IDgene2)  
tail(sort(table(IDgene2[,2])), n=12L) ## tail is the opposite to head
###this part is very important and need more thinking###
{ 
  MAX = by( exprSet, IDgene2[,2], 
             function(x) rownames(x) [ which.max(rowMeans(x))])
  MAX = as.character(MAX)
  exprSet = exprSet[ rownames(exprSet) %in% MAX, ]
  rownames(exprSet) = IDgene2 [ match(rownames(exprSet), IDgene2[,1]), 2]
 }
###END###
exprSet = log(exprSet)
dim(exprSet)
exprSet[1:5, 1:5]
save(exprSet, group_list, file= "final_exprSet.Rdata")
library(ggfortify)
###cluster##
{
  colnames( exprSet ) = paste( group_list, 1:ncol(exprSet), sep="_")
  nodePar <- list( lab.cex = 0.3 , pch=c(NA, 19), cex=0.3, col="red")
  hc = hclust(dist(t(exprSet)))
  png("hclust.png", res=250, height=1800)
  plot( as.dendrogram(hc), nodePar=nodePar, horiz= T)
  dev.off()
}
###END###
###PCA###
data=as.data.frame( t(exprSet))
data$group = group_list
png("pca_plot.png", res=80)
autoplot( prcomp( data[,1:(ncol(data)-1)]), data=data,
  colour= "group", label=T, frame=T)+ theme_bw()
dev.off()
###END###
###Difference expression analysis###
load("final_exprSet.Rdata")
library(limma)
{
  design <- model.matrix(~0+factor ( group_list))
  colnames(design) = levels(factor(group_list))
  rownames(design) = colnames(exprSet)
}
design
contrast.matrix <- makeContrasts( "gbm-normal", levels = design)
contrast.matrix
load("IDgene2.Rdata")
{
  fit <- lmFit( exprSet, design)
  fit2<- contrasts.fit(fit, contrast.matrix)
  fit2 <- eBayes(fit2)
  nrDEG = topTable ( fit2, coef = 1, n=Inf)
  write.table( nrDEG, file="nrDEG.out")
}
head(nrDEG)
###END###
###Plotting heat map### 
library(pheatmap)
{
  choose_gene = head( rownames(nrDEG), 50)
  choose_matrix = exprSet[ choose_gene, ]
  choose_matrix = t(scale(t(exprSet)))
  annotation_col = data.frame(CellType=factor(group_list))
  rownames( annotation_col) = colnames(exprSet)
  pheatmap( fontsize=2, choose_matrix, annotation_col = annotation_col, show_rownames=F,
            annotation_legend=F, filename="heatmap_glioma.png")
}  
###END###
###volcano plot###
library(ggplot2)
logFC_cutoff <- with( nrDEG, mean( abs(logFC))+2*sd(abs(logFC)))
logFC_cutoff
logFC_cutoff = 1
{
  nrDEG$change = as.factor(ifelse(nrDEG$P.Value < 0.5 & abs(nrDEG$logFC) > logFC_cutoff, 
                             ifelse(nrDEG$logFC > logFC_cutoff, "UP", "DOWN"), "NOT"))
  save(nrDEG, file="nrDEG.Rdata")
  this_title <- paste0("Cutoff for logFC is ", round(logFC_cutoff, 3),
                       "\nThe number of up gene is ", nrow(nrDEG[nrDEG$change == "UP",]),
					   "\nThe number of down gene is", nrow(nrDEG[nrDEG$change == "DOWN",]))
  volcano = ggplot(data=nrDEG, aes(x= logFC, y= -log10(P.Value), color=change))+
                   geom_point(alpha = 0.4, size=1.75) +
				   theme_set(theme_set(theme_bw(base_size = 15)))+
				   xlab("log2 fold change")+ylab("-log10 p-value")+
				   ggtitle(this_title)+theme(plot.title = element_text(size=15, hjust=0.5))+
				   scale_colour_manual(values=c("blue","black", "red"))
  print(volcano)
  ggsave(volcano, filename="volcano_glioma.png")
  dev.off()
}
###END###
###select sepcified genes to analyze their expression in different tumors###
library("ggstatsplot")
load("final_exprSet.Rdata")
special_gene = c("PVT1", "LINC00152", "HAR1A", "MIAT")
for (gene in special_gene) { 
	filename<- paste(gene,".png", sep="")
	TMP=exprSet[ rownames(exprSet) == gene , ]
	data=as.data.frame(TMP)
	data$group = group_list
	p <- ggbetweenstats(data=data, x= group, y= TMP)
	ggsave(p, filename=filename)
	}

####to look at the structure of gset
load("C:\\Users\\11780\\Documents\\R”Ô—‘¡∑œ∞\\GEO dataset drill\\glioma\\gset.Rdata")



 


			
  